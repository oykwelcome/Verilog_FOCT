/***************************************************
*说明：该模块为外部锁相环参数配置电路，
*特别注意的是，当400K时候，从外部过来的24M信号必须10分频;
*当4MHZ的时候，分频就无所谓了
*修改时候请注意内部锁相环的配置和Freq_initial模块
*date:2013/01/29
*Author:Yu Xuejun
*****/
`define out_24MHz 
module spi(clk,
			SYS_START,
			pll_clk,
			pll_din,
			pll_LE);

input clk; //10MHZ
input SYS_START;
output pll_clk,pll_LE,pll_din;
//reg [23:0] pll_data_R,pll_data_N,pll_data_C;	//the three registers of the ADF4360-9
//reg [6:0] num;									//a counter used for setting the waiting time  
reg [19:0] cnt;                					//a counter used for sending the datas of the three registers
reg [4:0] pbit;									//used for scanning and reading every bit of the three registers
//reg pll_clk,
reg pll_LE;
reg pll_din;
reg pll_start;

parameter 
WAIT=7'd10,
WIDTH=5'd23,
INTERVAL1=20'd160000,
INTERVAL2=20'd160024;  //INTERVAL1+24

/***************************************/
//for 8MHZ
`ifdef For_8MHz
parameter
pll_data_R1=24'h300021,    //R   
pll_data_C1=24'h4fd9c4,    //Control Latch 
pll_data_N1=24'h013836;    //N=B A
`endif
/****************************************/
//for 800kHZ
`ifdef For_800kHz
parameter
pll_data_R1=24'h300005,    //R   
pll_data_C1=24'h4fd9c4,    //Control Latch 
pll_data_N1=24'h018636;    //N=B A
`endif

`ifdef out_24MHz
parameter
pll_data_R1=24'h300021,    //R   
pll_data_C1=24'h4fd9c4,    //Control Latch 
pll_data_N1=24'h014052;    //24'h01389e;    //N=B A
`endif

assign pll_clk = (clk&(~pll_LE)&(pll_start));

initial 
begin
	pll_LE <= 1'b1;
	cnt <= 20'b0;
	pbit <= WIDTH;
	pll_din <= 1'b0;
	pll_start <= 1'b0; 
end
always @(negedge clk)																																									
begin
	if(!SYS_START)
	begin
		pll_start <= 1'b1;
	end
	else
	begin
		if((cnt==24)||(cnt==54)||(cnt==INTERVAL2))
			pll_start <= 1'b0;
		else if((cnt>=60)&&(cnt<INTERVAL1))
			pll_start <= 1'b0;
		else 
			pll_start <= 1'b1;
	end
end

always @(negedge clk)																																									
begin
	if(!SYS_START)
	begin							//initialize datas
		pll_LE<=1'b1;
		cnt<=20'b0;
		pbit<=WIDTH;
		pll_din <= 1'b0; 
	end
	else
	begin
		if(cnt<24)					//send the datas of R counter latch
		begin
			cnt<=cnt+1'b1;
			pll_LE<=1'b0;
			pbit<=pbit-1'b1;
			pll_din<=pll_data_R1[pbit];
		end
		else if(cnt<30)				//insert a clk cycle,stop the sending of the R counter latch
		begin
			cnt <= cnt+1'b1;
			pll_LE <= 1'b1;
			pbit <= WIDTH;
		end
		else if(cnt<54)//send the datas of control latch
		begin
			cnt <= cnt+1'b1;
			pll_LE <= 1'b0;
			pbit <= pbit-1'b1;
			pll_din <= pll_data_C1[pbit];
		end
		else if(cnt<60)
		begin
			cnt <= cnt+1'b1;
			pll_LE <= 1'b1;
			pbit <= WIDTH;
		end
		else if(cnt<INTERVAL1)	//interval:Cn=10uf--15ms;Cn=440nf--600us
		begin
			pbit<=WIDTH;
			cnt<=cnt+1'b1;
			pll_LE<=1'b0;
		end
		else if(cnt<INTERVAL2)      //send the datas of N counter latch
		begin
			cnt <= cnt+1'b1;
			pll_LE <= 1'b0;
			pbit <= pbit-1'b1;
			pll_din <= pll_data_N1[pbit];
		end
		else
		begin
			pll_LE <= 1'b1;
		end
	end
end

endmodule
